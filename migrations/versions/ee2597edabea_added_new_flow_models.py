"""added_new_flow_models

Revision ID: ee2597edabea
Revises: 51f4846ef0c8
Create Date: 2024-11-20 12:07:03.391881

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel             # NEW
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ee2597edabea'
down_revision = '51f4846ef0c8'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('flow_version',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('flow_version_id', sa.Integer(), nullable=False),
    sa.Column('commit_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('version_tag', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('comment', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['catalogdb.bh_user.bh_user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['catalogdb.bh_user.bh_user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('flow_version_id'),
    schema='catalogdb'
    )
    op.create_table('schema',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('schema_id', sa.Integer(), nullable=False),
    sa.Column('schema_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('commit_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('version_tag', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('comment', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('schema_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('schema_dependencies_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('platform_version', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['catalogdb.bh_user.bh_user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['catalogdb.bh_user.bh_user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('schema_id'),
    schema='catalogdb'
    )
    op.create_table('flow_config',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('flow_config', sa.JSON(), nullable=True),
    sa.Column('flow_config_id', sa.Integer(), nullable=False),
    sa.Column('flow_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['catalogdb.bh_user.bh_user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['flow_id'], ['catalogdb.flow.flow_id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['catalogdb.bh_user.bh_user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('flow_config_id'),
    schema='catalogdb'
    )
    op.create_table('flow_definition',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('flow_json', sa.JSON(), nullable=True),
    sa.Column('flow_definition_id', sa.Integer(), nullable=False),
    sa.Column('flow_id', sa.Integer(), nullable=False),
    sa.Column('schema_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['catalogdb.bh_user.bh_user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['flow_id'], ['catalogdb.flow.flow_id'], ),
    sa.ForeignKeyConstraint(['schema_id'], ['catalogdb.schema.schema_id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['catalogdb.bh_user.bh_user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('flow_definition_id'),
    schema='catalogdb'
    )
    op.drop_table('flow_alert', schema='catalogdb')
    op.drop_table('schedule_interval', schema='catalogdb')
    op.add_column('flow', sa.Column('alert_settings', sa.JSON(), nullable=True), schema='catalogdb')
    op.add_column('flow', sa.Column('is_deleted', sa.Boolean(), nullable=True, default=False), schema='catalogdb')
    op.drop_constraint('flow_flow_class_fkey', 'flow', schema='catalogdb', type_='foreignkey')
    op.drop_column('flow', 'git_branch', schema='catalogdb')
    op.drop_column('flow', 'last_executed', schema='catalogdb')
    op.drop_column('flow', 'flow_class', schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('cron_expression', sa.JSON(), nullable=True), schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('flow_version_id', sa.Integer(), nullable=True), schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('schema_id', sa.Integer(), nullable=True), schema='catalogdb')
    op.drop_constraint('flow_deployment_flow_locked_by_fkey', 'flow_deployment', schema='catalogdb', type_='foreignkey')
    op.create_foreign_key(None, 'flow_deployment', 'flow_version', ['flow_version_id'], ['flow_version_id'], source_schema='catalogdb', referent_schema='catalogdb')
    op.create_foreign_key(None, 'flow_deployment', 'schema', ['schema_id'], ['schema_id'], source_schema='catalogdb', referent_schema='catalogdb')
    op.drop_column('flow_deployment', 'flow_properties', schema='catalogdb')
    op.drop_column('flow_deployment', 'flow_wip_json', schema='catalogdb')
    op.drop_column('flow_deployment', 'flow_lock_status', schema='catalogdb')
    op.drop_column('flow_deployment', 'flow_version', schema='catalogdb')
    op.drop_column('flow_deployment', 'flow_json', schema='catalogdb')
    op.drop_column('flow_deployment', 'flow_locked_by', schema='catalogdb')
    op.alter_column('pipeline', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               schema='catalogdb')
    op.drop_column('pipeline', 'is_deleted', schema='catalogdb')
    # Read SQL commands from the file "dummy schema insert"
    with open('migrations/sql/dummy_schema_insert.sql') as sql_file:
        sql_commands = sql_file.read().split(';')

    # Execute each command separately
    for command in sql_commands:
        if command.strip():
            op.execute(command)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('pipeline', sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True), schema='catalogdb')
    op.alter_column('pipeline', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('flow_locked_by', sa.INTEGER(), autoincrement=False, nullable=True), schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('flow_json', sa.VARCHAR(), autoincrement=False, nullable=True), schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('flow_version', sa.VARCHAR(), autoincrement=False, nullable=True), schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('flow_lock_status', sa.BOOLEAN(), autoincrement=False, nullable=True), schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('flow_wip_json', sa.VARCHAR(), autoincrement=False, nullable=True), schema='catalogdb')
    op.add_column('flow_deployment', sa.Column('flow_properties', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True), schema='catalogdb')
 
    op.drop_constraint('flow_deployment_schema_id_fkey', 'flow_deployment', schema='catalogdb', type_='foreignkey')
    op.create_foreign_key('flow_deployment_flow_locked_by_fkey', 'flow_deployment', 'bh_user', ['flow_locked_by'], ['bh_user_id'], source_schema='catalogdb', referent_schema='catalogdb')
    op.drop_column('flow_deployment', 'schema_id', schema='catalogdb')
    op.drop_column('flow_deployment', 'flow_version_id', schema='catalogdb')
    op.drop_column('flow_deployment', 'cron_expression', schema='catalogdb')
    op.add_column('flow', sa.Column('flow_class', sa.INTEGER(), autoincrement=False, nullable=True), schema='catalogdb')
    op.add_column('flow', sa.Column('last_executed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True), schema='catalogdb')
    op.add_column('flow', sa.Column('git_branch', sa.VARCHAR(), autoincrement=False, nullable=True), schema='catalogdb')
    op.create_foreign_key('flow_flow_class_fkey', 'flow', 'codes_dtl', ['flow_class'], ['id'], source_schema='catalogdb', referent_schema='catalogdb')
    op.drop_column('flow', 'is_deleted', schema='catalogdb')
    op.drop_column('flow', 'alert_settings', schema='catalogdb')
    op.create_table('schedule_interval',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"catalogdb".schedule_interval_id_seq\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('schedule_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('flow_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['flow_id'], ['catalogdb.flow.flow_id'], name='schedule_interval_flow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='schedule_interval_pkey'),
    sa.UniqueConstraint('flow_id', name='schedule_interval_flow_id_key'),
    schema='catalogdb'
    )
    op.create_table('flow_alert',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('flow_alert_id', sa.INTEGER(), server_default=sa.text('nextval(\'"catalogdb".flow_alert_flow_alert_id_seq\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('flow_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('flow_alert', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['flow_id'], ['catalogdb.flow.flow_id'], name='flow_alert_flow_id_fkey'),
    sa.PrimaryKeyConstraint('flow_alert_id', name='flow_alert_pkey'),
    schema='catalogdb'
    )
    op.drop_table('flow_definition', schema='catalogdb')
    op.drop_table('flow_config', schema='catalogdb')
    op.drop_table('schema', schema='catalogdb')
    op.drop_table('flow_version', schema='catalogdb')
    # ### end Alembic commands ###