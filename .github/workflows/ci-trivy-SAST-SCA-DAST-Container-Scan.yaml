name: Trivy AquaSec Scan and Notify via Email & Teams

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DEFAULT_IMAGE_TAG: "latest"
  IMAGE_NAME: bh-catalog-api
  REPOSITORY: "058264070106.dkr.ecr.us-east-1.amazonaws.com"
  ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  AWS_REGION: "us-east-1"

# A wrkfow is made up of ome or more jobs that can run sequentially or parallel

jobs:
  sast_sca_scan:
    name: SAST & SCA Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SAST & SCA scan with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: 'fs'
          security-checks: 'vuln,secret'
          format: 'json'
          output: 'trivy_sast_sca_scan_report.json'
      
      - name: Convert Trivy DAST Vulnerability Scan Report JSON to HTML
        run: |
          # Start the HTML file
          echo "<html><body><h1>Trivy BH_CATALOG_API SAST/SCA Vulnerability Scan Report</h1><table border=\"1\">" > trivy_bh_catalog_api_sast_sca_scan_report.html
          echo "<tr><th>Target</th><th>Vulnerability ID</th><th>Severity</th><th>Description</th></tr>" >> trivy_bh_catalog_api_sast_sca_scan_report.html
          # Process the JSON and generate HTML table rows
          cat trivy_sast_sca_scan_report.json | jq -r '
          .Results[]? | .Target as $target |
            .Vulnerabilities[]? |
            "<tr><td>\($target)</td><td>\(.VulnerabilityID // "N/A")</td><td>\(.Severity // "N/A")</td><td>\(.Description // "N/A")</td></tr>"
          ' >> trivy_bh_catalog_api_sast_sca_scan_report.html
    
          # Close the HTML tags
          echo "</table></body></html>" >> trivy_bh_catalog_api_sast_sca_scan_report.html

      - name: Upload SAST & SCA scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-bh-catalog-api-sast-sca-scan-report
          path: trivy_bh_catalog_api_sast_sca_scan_report.html

  dast_scan:
    name: DAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run DAST scan with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: 'config'
          format: 'table'
          output: 'trivy_dast_scan_report.txt'
      
      - name: Convert Trivy DAST Vulnerability Scan Report to HTML
        run: |
          echo "<html><body><h1>Trivy BH_CATALOG_API DAST Scan Report</h1><pre>" > trivy_bh_catalog_api_dast_scan_report.html
          cat trivy_dast_scan_report.txt >> trivy_bh_catalog_api_dast_scan_report.html
          echo "</pre></body></html>" >> trivy_bh_catalog_api_dast_scan_report.html
             
      - name: Upload DAST scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-bh-catalog-api-dast-scan-report
          path: trivy_bh_catalog_api_dast_scan_report.html

  container_scan:
    name: Container Image Scan
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Log in to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.REPOSITORY }}
      

      - name: Pull Docker image
        run: docker pull $REPOSITORY/$IMAGE_NAME:$DEFAULT_IMAGE_TAG

      - name: Run container scan with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: 'image'
          image-ref: '${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_IMAGE_TAG }}'
          format: 'json'
          output: 'trivy_bh_catalog_api_container_scan_report.json'
      
      - name: Convert Trivy Container Vulnerability Scan Report JSON to HTML
        run: |
          # Start the HTML file
          echo "<html><body><h1>Trivy BH_CATALOG_API Container Vulnerability Scan Report</h1><table border=\"1\">" > trivy_bh_catalog_api_container_scan_report.html
          echo "<tr><th>Target</th><th>Vulnerability ID</th><th>Severity</th><th>Description</th></tr>" >> trivy_bh_catalog_api_container_scan_report.html

          # Process the JSON and generate HTML table rows
          cat trivy_bh_catalog_api_container_scan_report.json | jq -r '
            .Results[]? | .Target as $target |
            .Vulnerabilities[]? |
            "<tr><td>\($target)</td><td>\(.VulnerabilityID // "N/A")</td><td>\(.Severity // "N/A")</td><td>\(.Description // "N/A")</td></tr>"
          ' >> trivy_bh_catalog_api_container_scan_report.html

          # Close the HTML tags
          echo "</table></body></html>" >> trivy_bh_catalog_api_container_scan_report.html

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-bh-catalog-api-container-scan-report
          path: trivy_bh_catalog_api_container_scan_report.html